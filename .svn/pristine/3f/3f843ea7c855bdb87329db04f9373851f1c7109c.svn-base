package com.recalot.model.experiments.metrics.list;

import com.recalot.common.Helper;
import com.recalot.common.configuration.ConfigurationHandler;
import com.recalot.common.configuration.ConfigurationItem;
import com.recalot.common.exceptions.BaseException;
import com.recalot.common.interfaces.model.experiment.ListMetric;

import java.util.HashMap;
import java.util.List;

/**
 * Created by matthaeus.schmedding on 10.04.2015.
 * Precision = (|relevant items| in |retrieved items|) divided by |retrieved items|
 */
public class Precision extends ListMetric {
    private int topN;
    private double testRun;
    private double sum;

    public Precision() {
    }

    protected Precision(HashMap<String, String> config) throws BaseException {
        setConfiguration(new ConfigurationItem(Helper.Keys.TopN, ConfigurationItem.ConfigurationItemType.Integer, "10", ConfigurationItem.ConfigurationItemRequirementType.Optional));

        ConfigurationHandler.CheckConfiguration(getConfiguration(), config);

        this.topN =  Integer.parseInt(getConfiguration(Helper.Keys.TopN).getValue());

        reset();
    }

    @Override
    public Precision create(HashMap<String, String> config) throws BaseException {
        return new Precision(config);
    }


    @Override
    public double getResult() {
        if (testRun == 0) return 0;
        return sum / testRun;
    }

    @Override
    public void reset() {
        testRun = 0.0;
        sum = 0.0;
    }

    @Override
    public void addList(List<String> relevant, List<String> retrieved) {
        List<String> topNretrieved = retrieved.subList(0, topN);
        int count = 0;

        for (String item : topNretrieved) {
            if (relevant.contains(item)) count++;
        }

        sum += 1.0 * count / topN;

        testRun++;
    }
}
