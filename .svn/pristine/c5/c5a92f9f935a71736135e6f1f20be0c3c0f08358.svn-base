package com.recalot.common.interfaces.model.experiment;

import com.recalot.common.Helper;
import com.recalot.common.configuration.Configurable;
import com.recalot.common.configuration.ConfigurationItem;
import com.recalot.common.exceptions.BaseException;
import com.recalot.common.communication.Service;

import java.io.IOException;
import java.util.Map;

/**
 * @author Matthaeus.schmedding
 */
public abstract class Metric extends Configurable implements Service {
    private String id;
    private final Map<String, String> config;
    private final String name;
    private String info;

    public Metric(String name, String id, Map<String, String> config) throws BaseException {

        this.id = id;
        this.config = config;
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public String getInfo() {
        StringBuilder builder = new StringBuilder();
        builder.append(this.name + ";");
        builder.append(this.config.get(Helper.Keys.RecommenderId) + ";");
        builder.append(this.config.get(Helper.Keys.SourceId) + ";");
        builder.append(this.config.get(Helper.Keys.DataSplitterId) + ";");
        for (ConfigurationItem item : this.getConfiguration()) {
            builder.append(item.getKey() + ":" + item.getValue() + ";");
        }

        return builder.toString();
    }


    @Override
    public String getKey() {
        return this.getName();
    }

    @Override
    public void close() throws IOException {

    }

    public abstract Metric create(String id, Map<String, String> config) throws BaseException;
    public abstract double getResult();

    public abstract void reset();


    public String getId() {
        return id;
    }
}
