package com.recalot.unittests;

import com.recalot.common.communication.Message;
import com.recalot.common.interfaces.model.data.DataInformation;
import com.recalot.common.interfaces.model.data.DataSource;
import com.recalot.unittests.helper.WebRequest;
import com.recalot.unittests.helper.WebResponse;
import flexjson.JSONDeserializer;
import org.junit.Test;

import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.*;

/**
 * Created by matthaeus.schmedding on 24.04.2015.
 */
public class DataSourceTests {
    public static String HOST = "http://localhost:8080/";
    public static String Path = "sources/";
    public static String JsonMimeType = "application/json; charset=UTF-8";

    @Test
    public void getDataSources() {
        WebResponse response = WebRequest.execute(HOST + Path);
        assertNotNull(response);
        assertEquals(response.getContentType(), JsonMimeType);
        assertNotNull(response.getBody());
        assertEquals(response.getResponseCode(), 200);

        List<DataInformation> sources = new JSONDeserializer<List<DataInformation>>().deserialize(response.getBody());

        //should be at least two: sql and movielens

        assertNotNull(sources);
        assertNotEquals(sources.size(), 0);
        assertNotEquals(sources.size(), 1);
    }

    @Test
    public void connectSQLDataSource() {

        Map<String, String> params = new Hashtable<>();
        params.put("data-builder-id", "mysql");
        params.put("source-id", "mysql-test");
        params.put("sql-server", "mysql://localhost:3306");
        params.put("sql-database", "recalot_test");
        params.put("sql-username", "root");
        params.put("sql-password", "mysqlpassword");

        WebResponse response = WebRequest.execute(WebRequest.HTTPMethod.PUT, HOST + Path, params);

        assertNotNull(response);
        assertEquals(response.getContentType(), JsonMimeType);
        assertNotNull(response.getBody());
        assertEquals(response.getResponseCode(), 200);


        HashMap map = new JSONDeserializer<HashMap>().deserialize(response.getBody());

        assertNotNull(map);

        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        WebResponse response2 = WebRequest.execute(HOST + Path + "mysql-test");

        assertNotNull(response2);
        assertEquals(response2.getContentType(), JsonMimeType);
        assertNotNull(response2.getBody());
        assertEquals(response2.getResponseCode(), 200);

        HashMap source = new JSONDeserializer<HashMap>().deserialize(response2.getBody());

        assertNotNull(source);
        assertEquals(source.get("id"), "mysql-test");
        assertNotEquals(source.get("itemsCount"), 0);
        assertNotEquals(source.get("usersCount"), 0);
        assertNotEquals(source.get("interactionsCount"), 0);
    }

    @Test
    public void getMySQLDataSource(){
        WebResponse response2 = WebRequest.execute(HOST + Path + "mysql-test");

        assertNotNull(response2);
        assertEquals(response2.getContentType(), JsonMimeType);
        assertNotNull(response2.getBody());
        assertEquals(response2.getResponseCode(), 200);

        HashMap source = new JSONDeserializer<HashMap>().deserialize(response2.getBody());

        assertNotNull(source);
        assertEquals(source.get("id"), "mysql-test");
        assertNotEquals(source.get("itemsCount"), 0);
        assertNotEquals(source.get("usersCount"), 0);
        //assertNotEquals(source.get("interactionsCount"), 0);
    }

    @Test
    public void connectMovieLensDataSource() {
        Map<String, String> params = new Hashtable<>();
        params.put("data-builder-id", "ml");
        params.put("source-id", "ml-100");
        params.put("dir", "C:/Privat/3_Uni/5_Workspaces/data/ml-1m");

        WebResponse response = WebRequest.execute(WebRequest.HTTPMethod.PUT, HOST + Path, params);

        assertNotNull(response);
        assertEquals(response.getContentType(), JsonMimeType);
        assertNotNull(response.getBody());
        assertEquals(response.getResponseCode(), 200);

        HashMap map = new JSONDeserializer<HashMap>().deserialize(response.getBody());

        assertNotNull(map);

        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        WebResponse response2 = WebRequest.execute(HOST + Path + "ml-100");


        assertNotNull(response2);
        assertEquals(response2.getContentType(), JsonMimeType);
        assertNotNull(response2.getBody());
        assertEquals(response2.getResponseCode(), 200);

        HashMap source = new JSONDeserializer<HashMap>().deserialize(response2.getBody());

        assertNotNull(source);
        assertEquals(source.get("id"), "ml-100");
        assertNotEquals(source.get("itemsCount"), 0);
        assertNotEquals(source.get("usersCount"), 0);
        assertNotEquals(source.get("interactionsCount"), 0);
    }
    @Test
    public void getMovieLensDataSource() {

        WebResponse response = WebRequest.execute(HOST + Path + "ml-100");

        assertNotNull(response);
        assertEquals(response.getContentType(), JsonMimeType);
        assertNotNull(response.getBody());
        assertEquals(response.getResponseCode(), 200);

        HashMap source = new JSONDeserializer<HashMap>().deserialize(response.getBody());

        assertNotNull(source);
        assertEquals(source.get("id"), "ml-100");
        assertNotEquals(source.get("itemsCount"), 0);
        assertNotEquals(source.get("usersCount"), 0);
        assertNotEquals(source.get("interactionsCount"), 0);
    }

    @Test
    public void deleteSQLDataSource() {
        Map<String, String> params = new Hashtable<>();
        params.put("data-builder-id", "mysql");
        params.put("source-id", "mysql-test");
        params.put("sql-server", "mysql://localhost:3306");
        params.put("sql-database", "recalot_test");
        params.put("sql-username", "root");
        params.put("sql-password", "mysqlpassword");

        WebResponse response = WebRequest.execute(WebRequest.HTTPMethod.PUT, HOST + Path, params);

        assertNotNull(response);
        assertEquals(response.getContentType(), JsonMimeType);
        assertNotNull(response.getBody());
        assertEquals(response.getResponseCode(), 200);

        Message message = new JSONDeserializer<Message>().deserialize(response.getBody());

        assertNotNull(message);
        assertEquals(message.getStatus(), Message.Status.INFO);


        WebResponse response2 = WebRequest.execute(WebRequest.HTTPMethod.DELETE, HOST + Path + "mysql-test");

        assertNotNull(response2);
        assertEquals(response2.getContentType(), JsonMimeType);
        assertNotNull(response2.getBody());
        assertEquals(response2.getResponseCode(), 200);

        Message message2 = new JSONDeserializer<Message>().deserialize(response2.getBody());

        assertNotNull(message2);

        try {
            WebResponse response3 = WebRequest.execute(HOST + Path + "mysql-test");
            fail();

        } catch (Exception e) {

        }
    }

    @Test
    public void deleteMovieLensDataSource() {
        Map<String, String> params = new Hashtable<>();
        params.put("data-builder-id", "ml");
        params.put("source-id", "ml-100");
        params.put("dir", "C:/Privat/3_Uni/5_Workspaces/data/ml-1m");

        WebResponse response = WebRequest.execute(WebRequest.HTTPMethod.PUT, HOST + Path, params);

        assertNotNull(response);
        assertEquals(response.getContentType(), JsonMimeType);
        assertNotNull(response.getBody());
        assertEquals(response.getResponseCode(), 200);

        HashMap map = new JSONDeserializer<HashMap>().deserialize(response.getBody());

        assertNotNull(map);
        assertEquals(map.get("id"), "ml-100");

        WebResponse response2 = WebRequest.execute(WebRequest.HTTPMethod.DELETE, HOST + Path + "ml-100");

        assertNotNull(response2);
        assertEquals(response2.getContentType(), JsonMimeType);
        assertNotNull(response2.getBody());
        assertEquals(response2.getResponseCode(), 200);

        HashMap message2 = new JSONDeserializer<HashMap>().deserialize(response2.getBody());

        assertNotNull(message2);

        try {
            WebResponse response3 = WebRequest.execute(HOST + Path + "ml-100");
            assertNull(response3);

        } catch (Exception e) {

        }
    }
}
