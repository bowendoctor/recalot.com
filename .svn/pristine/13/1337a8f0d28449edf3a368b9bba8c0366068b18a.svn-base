package com.recalot.common.configuration;

import com.recalot.common.exceptions.BaseException;
import com.recalot.common.exceptions.MissingArgumentException;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by matthaeus.schmedding on 02.04.2015.
 */
public abstract class  Configurable {

    protected HashMap<String, ConfigurationItem> configurationMap = new HashMap<>();

    public ConfigurationItem[] getConfiguration() {
        return configurationMap.values().toArray(new ConfigurationItem[configurationMap.size()]);
    }

    public void setConfiguration(List<ConfigurationItem> configuration) {
        configurationMap = new HashMap<>();
        if (configuration != null) {
            for (ConfigurationItem item : configuration) {
                configurationMap.put(item.getKey(), item);
            }
        }
    }

    public ConfigurationItem getConfiguration(String key) {
        return configurationMap.get(key);
    }

    public void setConfiguration(ConfigurationItem configuration){
        configurationMap.put(configuration.getKey(), configuration);
    }

    public void checkConfiguration(Map<String, String> config) throws BaseException
    {
        checkConfiguration("", config);
    }

    public void checkConfiguration(String prefix, Map<String, String> config) throws BaseException {
        if(this.configurationMap != null && config != null) {
            for (ConfigurationItem item : this.configurationMap.values()) {
                if (item.getRequirement() == ConfigurationItem.ConfigurationItemRequirementType.Required && !config.containsKey(prefix + item.getKey())) {
                    throw new MissingArgumentException("The argument %s is missing.", prefix + item.getKey());
                }

                if (config.containsKey(prefix + item.getKey())) {
                    item.setValue(config.get(prefix + item.getKey()));
                }
            }
        }
    }
}
