package com.recalot.model.rec.recommender;


import com.recalot.common.builder.Initiator;
import com.recalot.common.builder.RecommenderBuilder;
import com.recalot.common.configuration.ConfigurationItem;
import com.recalot.common.exceptions.BaseException;
import com.recalot.common.impl.experiment.Experiment;
import com.recalot.common.interfaces.model.rec.Recommender;
import com.recalot.model.rec.recommender.mostpopular.MostPopularRecommender;
import org.osgi.framework.BundleActivator;
import org.osgi.framework.BundleContext;

import java.util.ArrayList;
import java.util.List;


/**
 * @author Matthaeus.schmedding
 */
public class Activator implements BundleActivator, Initiator{


    private List<RecommenderBuilder> recommenders;

    /**
     * Implements BundleActivator.start(). Prints
     * a message and adds itself to the bundle context as a service
     * listener.
     *
     * @param context the framework context for the bundle.
     */
    public void start(BundleContext context) {
        recommenders = new ArrayList<>();

        try {
            RecommenderBuilder movieLensBuilder = new RecommenderBuilder(this, MostPopularRecommender.class.getName(), "mp", "");
            movieLensBuilder.setConfiguration(new ConfigurationItem("topN", ConfigurationItem.ConfigurationItemType.Integer, "", ConfigurationItem.ConfigurationItemRequirementType.Required));
            recommenders.add(movieLensBuilder);
        } catch (BaseException e) {
            e.printStackTrace();
        }

        for (RecommenderBuilder c : recommenders) {
            context.registerService(RecommenderBuilder.class.getName(), c, null);
        }
    }

    /**
     * Implements BundleActivator.stop(). Prints
     * a message and removes itself from the bundle context as a
     * service listener.
     *
     * @param context the framework context for the bundle.
     */
    public void stop(BundleContext context) throws Exception {
        if (recommenders != null) {
            for (RecommenderBuilder c : recommenders) {
                c.close();
            }
            recommenders = null;
        }
    }

    @Override
    public Object createInstance(String className) {
        try {
            Class c = Class.forName(className);
            return c.newInstance();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
}