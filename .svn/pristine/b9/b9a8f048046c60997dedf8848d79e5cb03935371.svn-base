package com.recalot.common.interfaces.model.rec;

import com.recalot.common.communication.DataSet;
import com.recalot.common.communication.RecommendationResult;
import com.recalot.common.configuration.Configurable;
import com.recalot.common.exceptions.BaseException;

import java.util.Map;

/**
 * @author Matthaeus.schmedding
 */
public abstract class Recommender extends Configurable implements RecommenderInformation {
    private String dataSourceId;
    private String recommenderId;
    private RecommenderState state;
    private String key;
    private DataSet dataSet;

    @Override
    public RecommenderState getState() {
        return state;
    }

    public void setState(RecommenderState state){
        this.state = state;
    }
    @Override
    public String getId() {
        return recommenderId;
    }

    public void setId(String recommenderId) {
        this.recommenderId = recommenderId;
    }

    public String getKey() {
        return key;
    }

    public void setKey(String key) {
        this.key = key;
    }

    public String getDataSourceId() {
        return dataSourceId;
    }

    public void setDataSourceId(String dataSourceId) {
        this.dataSourceId = dataSourceId;
    }

    public void setDataSet(DataSet dataSet){
        this.dataSet = dataSet;
    }
    public DataSet getDataSet(){
        return this.dataSet;
    }

    public abstract void train() throws BaseException;

    public RecommendationResult recommend(String userId) {
        return recommend(userId, null);
    }

    public RecommendationResult recommend(String userId, Map<String, String> param){
        return recommend(userId, null, param);
    }
    public abstract RecommendationResult recommend(String userId, Context context, Map<String, String> param);

    public Double predict(String userId, String itemId){
        return predict(userId, itemId, null);
    }

    public Double predict(String userId, String itemId, Map<String, String> param){
        return predict(userId, itemId, null, param);
    }

    public abstract Double predict(String userId, String itemId, Context context, Map<String, String> param);
}
