package com.recalot.model.experiments.metrics;


import com.recalot.common.Helper;
import com.recalot.common.builder.MetricBuilder;
import com.recalot.common.configuration.ConfigurationItem;
import com.recalot.common.interfaces.model.experiment.Metric;
import com.recalot.common.interfaces.model.experiment.MetricInformation;
import com.recalot.model.experiments.metrics.list.*;
import org.osgi.framework.BundleActivator;
import org.osgi.framework.BundleContext;

import java.util.ArrayList;
import java.util.List;


/**
 * @author Matthaeus.schmedding
 */
public class Activator implements BundleActivator {


    private List<MetricBuilder> metrics;

    /**
     * Implements BundleActivator.start(). Prints
     * a message and adds itself to the bundle context as a service
     * listener.
     *
     * @param context the framework context for the bundle.
     */
    public void start(BundleContext context) {



        metrics = new ArrayList<>();
        try {


            MetricBuilder fscoreBuilder = new MetricBuilder(FScore.class.getName(), "fscore", "F-Score");
            fscoreBuilder.setConfiguration(new ConfigurationItem(Helper.Keys.TopN, ConfigurationItem.ConfigurationItemType.Integer, "10", ConfigurationItem.ConfigurationItemRequirementType.Optional));
            fscoreBuilder.setConfiguration(new ConfigurationItem("beta", ConfigurationItem.ConfigurationItemType.Double , "1.0", ConfigurationItem.ConfigurationItemRequirementType.Optional));

            MetricBuilder precisionBuilder = new MetricBuilder(Precision.class.getName(), "precision", "Precision");
            precisionBuilder.setConfiguration(new ConfigurationItem(Helper.Keys.TopN, ConfigurationItem.ConfigurationItemType.Integer, "10", ConfigurationItem.ConfigurationItemRequirementType.Optional));
            precisionBuilder.setConfiguration(new ConfigurationItem("beta", ConfigurationItem.ConfigurationItemType.Double , "1.0", ConfigurationItem.ConfigurationItemRequirementType.Optional));

            MetricBuilder recallBuilder = new MetricBuilder(Recall.class.getName(), "recall", "Recall");
            recallBuilder.setConfiguration(new ConfigurationItem(Helper.Keys.TopN, ConfigurationItem.ConfigurationItemType.Integer, "10", ConfigurationItem.ConfigurationItemRequirementType.Optional));
            recallBuilder.setConfiguration(new ConfigurationItem("beta", ConfigurationItem.ConfigurationItemType.Double , "1.0", ConfigurationItem.ConfigurationItemRequirementType.Optional));

            MetricBuilder giniBuilder = new MetricBuilder(Gini.class.getName(), "gini", "Gini");
            giniBuilder.setConfiguration(new ConfigurationItem(Helper.Keys.TopN, ConfigurationItem.ConfigurationItemType.Integer, "10", ConfigurationItem.ConfigurationItemRequirementType.Optional));
            giniBuilder.setConfiguration(new ConfigurationItem("beta", ConfigurationItem.ConfigurationItemType.Double , "1.0", ConfigurationItem.ConfigurationItemRequirementType.Optional));

            MetricBuilder coverageBuilder = new MetricBuilder(Coverage.class.getName(), "coverage", "Coverage");
            coverageBuilder.setConfiguration(new ConfigurationItem(Helper.Keys.TopN, ConfigurationItem.ConfigurationItemType.Integer, "10", ConfigurationItem.ConfigurationItemRequirementType.Optional));
            coverageBuilder.setConfiguration(new ConfigurationItem("beta", ConfigurationItem.ConfigurationItemType.Double , "1.0", ConfigurationItem.ConfigurationItemRequirementType.Optional));


            metrics.add(fscoreBuilder);
            metrics.add(precisionBuilder);
            metrics.add(recallBuilder);
            metrics.add(giniBuilder);
            metrics.add(coverageBuilder);
        } catch (Exception e) {
            e.printStackTrace();
        }


        for (MetricBuilder c : metrics) {
            context.registerService(MetricInformation.class.getName(), c, null);
        }
    }

    /**
     * Implements BundleActivator.stop(). Prints
     * a message and removes itself from the bundle context as a
     * service listener.
     *
     * @param context the framework context for the bundle.
     */
    public void stop(BundleContext context) throws Exception {
        if (metrics != null) {
            metrics = null;
        }
    }
}