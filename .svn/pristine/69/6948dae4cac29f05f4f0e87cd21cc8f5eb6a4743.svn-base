package com.recalot.views.data.tracking;

import com.recalot.common.Helper;
import com.recalot.common.communication.TemplateResult;
import com.recalot.common.interfaces.controller.DataAccessController;
import com.recalot.views.common.GenericControllerHandler;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


/**
 * @author Matthaeus.schmedding
 */
public class Servlet extends HttpServlet {
    private GenericControllerHandler handler;
    private Pattern pattern;

    public Servlet(GenericControllerHandler handler) {
        this.handler = handler;
        this.pattern = Pattern.compile("/(Users|users)/(\\w*)/(Items|items)/(\\w*).?(\\w*)?");
    }

    /**
     * TODO: deactivate it later. Just for debugging
     *
     * @param req
     * @param res
     * @throws ServletException
     * @throws IOException
     */
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
        processRequest(req, res);

        if (true) return;

        res.setContentType("text/plain");
        res.setStatus(405);
        PrintWriter out = res.getWriter();
        out.println("Method Not Allowed");
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
        processRequest(req, res);
    }


    protected void processRequest(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
        String pathInfo = req.getPathInfo();
        TemplateResult result = null;
        if (pathInfo != null && !pathInfo.equals("")) {
            Matcher matcher = pattern.matcher(pathInfo);

            while (matcher.find()) {
                if (matcher.groupCount() >= 5) {
                    String userId = matcher.group(2);
                    String itemId = matcher.group(4);

                    String templateKey = matcher.group(5);

                    if (userId != null && !userId.trim().equals("")
                            && itemId != null && !itemId.trim().equals("")
                            && templateKey != null && !templateKey.trim().equals("")
                            ) {

                        Map<String, String> params = new HashMap<>();
                        params.put("itemId", itemId);
                        params.put("userId", userId);

                        result = handler.process(DataAccessController.DataAccessRequestAction.AddInteraction, templateKey, params);
                    }
                }
            }
        }


        if (result == null) {
            //   out.println("TODO print error");
        } else {
            res.setContentType(result.getContentType());
            res.setCharacterEncoding(result.getCharset().name());
            res.setStatus(result.getStatus());
            PrintWriter out = res.getWriter();
            Helper.Copy(out, result.getResult());
        }
    }
}