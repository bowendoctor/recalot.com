package com.recalot.controller.experiments;


import com.recalot.common.GenericServiceListener;
import com.recalot.common.exceptions.BaseException;
import com.recalot.common.interfaces.controller.RequestAction;
import com.recalot.common.interfaces.model.*;
import com.recalot.common.interfaces.template.ExperimentTemplate;
import com.recalot.common.interfaces.template.RecommenderTemplate;
import com.recalot.common.interfaces.template.TemplateResult;
import org.osgi.framework.BundleContext;

import java.io.Closeable;
import java.io.IOException;
import java.util.Map;


/**
 * @author matthaeus.schmedding
 */
public class ExperimentsController implements com.recalot.common.interfaces.controller.ExperimentsController, Closeable {

    private final BundleContext context;
    private final GenericServiceListener recommenderAccess;
    private final GenericServiceListener templates;
    private final GenericServiceListener dataAccess;
    private final GenericServiceListener experimentsAccess;


    public ExperimentsController(BundleContext context) {
        this.context = context;
        this.recommenderAccess = new GenericServiceListener<RecommenderAccess>(context, RecommenderAccess.class.getName());
        this.dataAccess = new GenericServiceListener<DataAccess>(context, DataAccess.class.getName());
        this.experimentsAccess = new GenericServiceListener<ExperimentAccess>(context, ExperimentAccess.class.getName());
        this.templates = new GenericServiceListener<ExperimentTemplate>(context, RecommenderTemplate.class.getName());

        this.context.addServiceListener(recommenderAccess);
        this.context.addServiceListener(dataAccess);
        this.context.addServiceListener(templates);
    }

    @Override
    public TemplateResult process(RequestAction action, String templateKey, Map<String, String> param) throws BaseException {

        ExperimentTemplate template = (ExperimentTemplate) templates.getInstance(templateKey);
        TemplateResult result = null;

        try {
            ExperimentAccess access = (ExperimentAccess) experimentsAccess.getFirstInstance();
            RecommenderAccess rAccess = (RecommenderAccess) experimentsAccess.getFirstInstance();
            DataAccess dAccess = (DataAccess) dataAccess.getFirstInstance();

            switch ((ExperimentsRequestAction) action) {
                case GetExperiments: {
                    result = getExperiments(access, template);
                    break;
                }
                case CreateExperiment: {
                    result = createExperiment(access, rAccess, dAccess, template, param);
                    break;
                }
                case DeleteExperiment: {
                    result = deleteExperiment(access, template, param);
                    break;
                }
                case GetExperiment: {
                    result = getExperiment(access, template, param);
                    break;
                }
            }
        } catch (BaseException ex) {
            result = template.transform(ex);
        }

        return result;
    }

    private TemplateResult getExperiments(ExperimentAccess access, ExperimentTemplate template) throws BaseException {
        return template.transform(access.getExperiments());
    }

    private TemplateResult createExperiment(ExperimentAccess access, RecommenderAccess rAccess, DataAccess dAccess, ExperimentTemplate template, Map<String, String> param) throws BaseException {
        DataSource dataSource = dAccess.getDataSource(param.get(SourceIdKey));
        Recommender recommender = rAccess.getRecommender(param.get(RecommenderIdKey));

        return template.transform(access.createExperiment(recommender, dataSource, param));
    }

    private TemplateResult deleteExperiment(ExperimentAccess access, ExperimentTemplate template, Map<String, String> param) throws BaseException {
        return template.transform(access.deleteExperiment(param.get(ExperimentIdKey)));
    }

    private TemplateResult getExperiment(ExperimentAccess access, ExperimentTemplate template, Map<String, String> param) throws BaseException {
        return template.transform(access.getExperiment(param.get(ExperimentIdKey)));
    }


    private DataSource getDataSource(DataAccess access, String sourceId) throws BaseException {
        return access.getDataSource(sourceId);
    }

    @Override
    public void close() throws IOException {
        if (recommenderAccess != null) {
            this.context.removeServiceListener(recommenderAccess);
        }

        if (dataAccess != null) {
            this.context.removeServiceListener(dataAccess);
        }

        if (templates != null) {
            this.context.removeServiceListener(templates);
        }
        if (experimentsAccess != null) {
            this.context.removeServiceListener(experimentsAccess);
        }
    }
}
