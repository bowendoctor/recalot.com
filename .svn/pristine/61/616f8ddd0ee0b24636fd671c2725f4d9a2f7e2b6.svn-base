package com.recalot.unittests;

import com.recalot.common.Helper;
import com.recalot.common.impl.experiment.Experiment;
import com.recalot.common.interfaces.model.experiment.DataSplitter;
import com.recalot.common.interfaces.model.experiment.Metric;
import com.recalot.common.interfaces.model.rec.RecommenderInformation;
import com.recalot.unittests.helper.WebRequest;
import com.recalot.unittests.helper.WebResponse;
import flexjson.JSONDeserializer;
import org.junit.Test;

import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;

/**
 * Created by matthaeus.schmedding on 24.04.2015.
 */
public class ExperimentsTests extends TestsBase {
    private String Path = "experiments/";
    private String MetricsPath = "metrics/";
    private String SplitterPath = "splitters/";

    @Test
    public void getMetrics() {

        WebResponse response = WebRequest.execute(HOST + Path + MetricsPath);
        assertNotNull(response);
        assertEquals(response.getContentType(), JsonMimeType);
        assertNotNull(response.getBody());
        assertEquals(response.getResponseCode(), 200);
        List<Metric> metrics = new JSONDeserializer<List<Metric>>().deserialize(response.getBody());
        assertNotNull(metrics);
        assertNotEquals(metrics.size(), 0);
    }

    @Test
    public void getDataSplitter() {
        WebResponse response = WebRequest.execute(HOST + Path + SplitterPath);
        assertNotNull(response);
        assertEquals(response.getContentType(), JsonMimeType);
        assertNotNull(response.getBody());
        assertEquals(response.getResponseCode(), 200);
        List<HashMap> splitter = new JSONDeserializer<List<HashMap>>().deserialize(response.getBody());
        assertNotNull(splitter);
        assertNotEquals(splitter.size(), 0);
    }

    @Test
    public void getRandomSplitter() {
        String id = "random";
        WebResponse response = WebRequest.execute(HOST + Path + SplitterPath + id);
        assertNotNull(response);
        assertEquals(response.getContentType(), JsonMimeType);
        assertNotNull(response.getBody());
        assertEquals(response.getResponseCode(), 200);
        HashMap splitter = new JSONDeserializer<HashMap>().deserialize(response.getBody());
        assertNotNull(splitter);
        assertEquals(splitter.get("key"), id);
        assertNotNull(splitter.get("configuration"));
    }

    @Test
    public void getExperiments() {
        WebResponse response = WebRequest.execute(HOST + Path);
        assertNotNull(response);
        assertEquals(response.getContentType(), JsonMimeType);
        assertNotNull(response.getBody());
        assertEquals(response.getResponseCode(), 200);
        List<Experiment> experiments = new JSONDeserializer<List<Experiment>>().deserialize(response.getBody());
        assertNotNull(experiments);
        assertNotEquals(experiments.size(), 0);
    }

    @Test
    public void createExperiment() {
        Map<String, String> params = new Hashtable<>();

        params.put(Helper.Keys.SourceId, SourceId);
        params.put(Helper.Keys.RecommenderId, "mp");
        params.put(Helper.Keys.DataSplitterId, "random");
        params.put(Helper.Keys.ExperimentId, "test");
        params.put(Helper.Keys.MetricIDs, "precision@p10,recall@r10,precision@p5,recall@r5");
        params.put("p10.topN", "10");
        params.put("r10.topN", "10");
        params.put("p5.topN", "5");
        params.put("r5.topN", "5");

        WebResponse response = WebRequest.execute(WebRequest.HTTPMethod.PUT, HOST + Path, params);
        assertNotNull(response);
        assertEquals(response.getContentType(), JsonMimeType);
        assertNotNull(response.getBody());
        assertEquals(response.getResponseCode(), 200);
        Experiment experiments = new JSONDeserializer<Experiment>().deserialize(response.getBody());
        assertNotNull(experiments);
        assertNotEquals(experiments.getState(), com.recalot.common.interfaces.model.experiment.Experiment.ExperimentState.FINISHED);
    }
}
